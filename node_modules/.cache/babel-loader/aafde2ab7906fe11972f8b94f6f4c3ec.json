{"ast":null,"code":"import sounds from './Assets/sounds/Sounds.js';\nexport const instrumentTemplate = {\n  \"xylophone\": {\n    numBoxes: 7,\n    genBoxes: regularRectangleBoxes,\n    name: \"xylophone\"\n  },\n  \"guitar\": {\n    numBoxes: 7,\n    genBoxes: guitarBoxes,\n    name: \"guitar\"\n  }\n};\n\nfunction instruments(name, minX, maxX, minY, maxY) {\n  const template = Object.create(instrumentTemplate[name]);\n  template.boxes = template.genBoxes(template.numBoxes, minX, maxX, minY, maxY, sounds[name]);\n  delete template.genBoxes;\n  return template;\n}\n\nfunction guitarBoxes(numBoxes, minX, maxX, minY, maxY, sounds) {\n  numBoxes += 2;\n  let boxes = regularRectangleBoxes(numBoxes, minX, maxX, 0, 600, sounds);\n  boxes[2].minX = boxes[0].minX;\n  boxes = boxes.slice(2, numBoxes - 2);\n\n  boxes[0].effect = () => {};\n\n  boxes[0].toggle = false;\n  boxes[0].minY = minY * 6 / 5;\n  boxes[0].maxY = maxY;\n  return boxes;\n}\n\nfunction regularRectangleBoxes(numBoxes, minX, maxX, minY, maxY, sounds) {\n  if (sounds.length < numBoxes) {\n    throw `There aren't enough sounds (${sounds.length}) for the number of boxes (${numBoxes}) you kiddy fiddler`;\n  }\n\n  const differenceX = maxX - minX;\n  const width = differenceX / numBoxes;\n  const boxes = [];\n\n  for (let i = 0; i < numBoxes; i++) {\n    const newMinX = minX + width * i;\n    const newMaxX = newMinX + width;\n    const sound = sounds[i];\n    boxes.push({\n      minY: minY,\n      maxY: maxY,\n      minX: newMinX,\n      maxX: newMaxX,\n      played: false,\n      effect: () => playSound(sound)\n    });\n  }\n\n  return boxes;\n}\n\n;\n\nfunction playSound(sound) {\n  const audio = new Audio(sound);\n  audio.play();\n}\n\nexport default instruments;","map":{"version":3,"sources":["/Users/gaurav_1411/Desktop/Dorami/frontend/src/Instruments.js"],"names":["sounds","instrumentTemplate","numBoxes","genBoxes","regularRectangleBoxes","name","guitarBoxes","instruments","minX","maxX","minY","maxY","template","Object","create","boxes","slice","effect","toggle","length","differenceX","width","i","newMinX","newMaxX","sound","push","played","playSound","audio","Audio","play"],"mappings":"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","sourcesContent":["import sounds from './Assets/sounds/Sounds.js';\n\nexport const instrumentTemplate = {\n    \"xylophone\": {\n        numBoxes: 7,\n        genBoxes: regularRectangleBoxes,\n        name: \"xylophone\"\n    },\n    \"guitar\": {\n        numBoxes: 7,\n        genBoxes: guitarBoxes,\n        name: \"guitar\"\n    }\n};\n\nfunction instruments(name, minX, maxX, minY, maxY) {\n    const template = Object.create(instrumentTemplate[name]);\n    template.boxes = template.genBoxes(template.numBoxes, minX, maxX, minY, maxY, sounds[name])\n    delete template.genBoxes;\n    return template;\n}\n\nfunction guitarBoxes(numBoxes, minX, maxX, minY, maxY, sounds) {\n    numBoxes += 2;\n    let boxes = (regularRectangleBoxes(numBoxes, minX, maxX, 0, 600, sounds));\n    boxes[2].minX = boxes[0].minX;\n    boxes = boxes.slice(2, numBoxes-2);\n    boxes[0].effect = () => {};\n    boxes[0].toggle = false;\n    boxes[0].minY = minY*6/5;\n    boxes[0].maxY = maxY;\n    return boxes;\n}\n\nfunction regularRectangleBoxes(numBoxes, minX, maxX, minY, maxY, sounds) {\n    if (sounds.length < numBoxes) {\n        throw `There aren't enough sounds (${sounds.length}) for the number of boxes (${numBoxes}) you kiddy fiddler`;\n    }\n    const differenceX = maxX - minX;\n    const width = differenceX / numBoxes;\n    const boxes = [];\n    for (let i = 0; i < numBoxes; i++) {\n        const newMinX = minX + (width*i);\n        const newMaxX = newMinX + width;\n        const sound = sounds[i];\n        boxes.push({\n            minY: minY,\n            maxY: maxY,\n            minX: newMinX,\n            maxX: newMaxX,\n            played: false,\n            effect: () => playSound(sound)\n        });\n    }\n    return boxes;\n};\n\nfunction playSound(sound){\n    const audio = new Audio(sound);\n    audio.play();\n}\n\nexport default instruments;\n"]},"metadata":{},"sourceType":"module"}