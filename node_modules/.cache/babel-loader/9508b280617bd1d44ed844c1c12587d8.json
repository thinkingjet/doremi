{"ast":null,"code":"var _jsxFileName = \"/Users/gaurav_1411/Desktop/XylophoneHero/frontend/src/components/Camera.js\";\nimport { drawKeyPoints, drawSkeleton } from './utils';\nimport React, { Component } from 'react';\nimport * as posenet from '@tensorflow-models/posenet';\n\nclass PoseNet extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCanvas = elem => {\n      this.canvas = elem;\n    };\n\n    this.getVideo = elem => {\n      this.video = elem;\n    };\n\n    this.state = {\n      loading: true,\n      score: 0,\n      modalName: this.props.modalName\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.modalName != prevProps.modalName) {\n      this.setState({\n        modalName: this.props.modalName,\n        loading: true\n      });\n\n      try {\n        this.posenet = await posenet.load({\n          architecture: this.state.modalName,\n          outputStride: 16,\n          quantBytes: 2\n        });\n        console.log(`Current modal is ${this.state.modalName}`);\n      } catch (error) {\n        console.log(error);\n        throw new Error('PoseNet failed to load');\n      } finally {\n        setTimeout(() => {\n          this.setState({\n            loading: false\n          });\n        }, 200);\n      }\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      await this.setupCamera();\n    } catch (error) {\n      throw new Error('This browser does not support video capture, or this device does not have a camera');\n    }\n\n    try {\n      this.posenet = await posenet.load({\n        architecture: this.state.modalName,\n        outputStride: 32,\n        quantBytes: 2\n      });\n      console.log(`Current modal is ${this.state.modalName}`);\n    } catch (error) {\n      console.log(error);\n      throw new Error('PoseNet failed to load');\n    } finally {\n      setTimeout(() => {\n        this.setState({\n          loading: false\n        });\n      }, 200);\n    }\n\n    this.detectPose();\n  }\n\n  async setupCamera() {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      throw new Error('Browser API navigator.mediaDevices.getUserMedia not available');\n    }\n\n    const {\n      videoWidth,\n      videoHeight\n    } = this.props;\n    const video = this.video;\n    video.width = videoWidth;\n    video.height = videoHeight;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        facingMode: 'user',\n        width: videoWidth,\n        height: videoHeight\n      }\n    });\n    video.srcObject = stream;\n    return new Promise(resolve => {\n      video.onloadedmetadata = () => {\n        video.play();\n        resolve(video);\n      };\n    });\n  }\n\n  detectPose() {\n    const {\n      videoWidth,\n      videoHeight\n    } = this.props;\n    const canvas = this.canvas;\n    const canvasContext = canvas.getContext('2d');\n    canvas.width = videoWidth;\n    canvas.height = videoHeight;\n    this.poseDetectionFrame(canvasContext);\n  }\n\n  poseDetectionFrame(canvasContext) {\n    let {\n      minPoseConfidence,\n      minPartConfidence,\n      videoWidth,\n      videoHeight,\n      showVideo,\n      showPoints,\n      showSkeleton,\n      skeletonColor,\n      skeletonLineWidth\n    } = this.props; //console.log(minPoseConfidence);\n    //console.log(this.props.minPoseConfidence);\n\n    const posenetModel = this.posenet;\n    const video = this.video;\n\n    const findPoseDetectionFrame = async () => {\n      var _this$props$currentIn;\n\n      /*let {\n      minPoseConfidence,\n      minPartConfidence,\n      videoWidth,\n      videoHeight,\n      showVideo,\n      showPoints,\n      showSkeleton,\n      skeletonColor,\n      skeletonLineWidth\n      } = this.props;\n      //console.log(minPoseConfidence);\n      //console.log(this.props.minPoseConfidence);\n      const posenetModel = this.posenet;\n      const video = this.video;*/\n      let poses = [];\n      const pose = await posenetModel.estimateSinglePose(this.video, {\n        video: true,\n        flipHorizontal: true\n      });\n      poses.push(pose);\n      canvasContext.clearRect(0, 0, videoWidth, videoHeight);\n\n      if (showVideo) {\n        canvasContext.save();\n        canvasContext.scale(-1, 1);\n        canvasContext.translate(-videoWidth, 0);\n        canvasContext.drawImage(video, 0, 0, videoWidth, videoHeight);\n        canvasContext.restore();\n      }\n\n      poses.forEach(({\n        score,\n        keypoints\n      }) => {\n        //console.log(this.props.minPoseConfidence);\n        if (score >= minPoseConfidence) {\n          if (showPoints) {\n            drawKeyPoints(keypoints, minPartConfidence, skeletonColor, canvasContext);\n          }\n\n          if (showSkeleton) {\n            drawSkeleton(keypoints, minPartConfidence, skeletonColor, skeletonLineWidth, canvasContext);\n          }\n        }\n      });\n\n      if (this.props.isHero && ((_this$props$currentIn = this.props.currentInstrument) === null || _this$props$currentIn === void 0 ? void 0 : _this$props$currentIn.name) === \"xylophone\" && PoseNet.songDone != this.props.songId) {\n        // if this is the beginning of the song, add first note\n        console.log(this.props.songId);\n\n        if (PoseNet.backlogNotes.length == 0 && PoseNet.currentNotes.length == 0 && this.props.songId != -1) {\n          this.setState({\n            score: 0\n          });\n          PoseNet.backlogNotes = PoseNet.songs[this.props.songId];\n          PoseNet.currentNotes.push({\n            id: PoseNet.backlogNotes[0][0],\n            x: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX + 10,\n            y: 0,\n            //this.props.currentInstrument.boxes[PoseNet.songs[this.props.songId][0][0]].minY\n            width: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].maxX - this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX - 20,\n            height: 50,\n            inBox: false,\n            isScored: false\n          });\n          PoseNet.timeDelay = PoseNet.backlogNotes[0][1] * 30;\n          PoseNet.backlogNotes = PoseNet.backlogNotes.slice(1, PoseNet.backlogNotes.length);\n        } //console.log(PoseNet.backlogNotes[0]);\n        //console.log(PoseNet.currentNotes);\n        // check if a new note should be added\n\n\n        if (PoseNet.timeCount == PoseNet.timeDelay && PoseNet.backlogNotes.length != 0) {\n          if (PoseNet.backlogNotes[0][0] != -1) {\n            PoseNet.currentNotes.push({\n              id: PoseNet.backlogNotes[0][0],\n              x: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX + 10,\n              y: 0,\n              //this.props.currentInstrument.boxes[PoseNet.songs[this.props.songId][0][0]].minY\n              width: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].maxX - this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX - 20,\n              height: 50\n            });\n          }\n\n          PoseNet.timeDelay =\n          /*PoseNet.backlogNotes[0][1]*/\n          7;\n          PoseNet.timeCount = 0;\n          PoseNet.backlogNotes = PoseNet.backlogNotes.slice(1, PoseNet.backlogNotes.length);\n        }\n\n        PoseNet.currentNotes.forEach(note => {\n          // if the note is in the box, check if the box is pressed\n          console.log(\"note.x = \");\n          console.log(note.x);\n          console.log(\"box.minX = \");\n          console.log(this.props.currentInstrument.boxes[note.id].minX);\n          console.log(\"note.x + note.width = \");\n          console.log(note.x + note.width);\n          console.log(\"box.maxX = \");\n          console.log(this.props.currentInstrument.boxes[note.id].maxX);\n\n          if (!note.isScored && note.y > this.props.currentInstrument.boxes[note.id].minY && note.y < this.props.currentInstrument.boxes[note.id].maxY && note.x >= this.props.currentInstrument.boxes[note.id].minX && note.x + note.width <= this.props.currentInstrument.boxes[note.id].maxX) {\n            note.inBox = true; //PoseNet.score += 1;\n            //note.isScored = true;\n          } else {\n            note.inBox = false;\n          }\n\n          if (note.y > this.props.currentInstrument.boxes[note.id].maxY) {\n            PoseNet.currentNotes = PoseNet.currentNotes.slice(1, PoseNet.currentNotes.length);\n          }\n\n          canvasContext.rect(note.x, note.y, note.width, note.height);\n          canvasContext.stroke();\n          note.y += 35;\n        });\n\n        if (PoseNet.backlogNotes.length == 0 && PoseNet.currentNotes.length == 0 && this.props.songId != -1) {\n          PoseNet.songDone = this.props.songId;\n          console.log(\"Score : \" + PoseNet.score);\n        }\n\n        PoseNet.timeCount += 1;\n      }\n\n      if (this.props.currentInstrument != null) {\n        const leftWrist = poses[0].keypoints[9].position;\n        const rightWrist = poses[0].keypoints[10].position;\n\n        if (this.props.currentInstrument.name === \"guitar\") {\n          this.props.currentInstrument.boxes.forEach(ele => {\n            canvasContext.rect(ele.minX, ele.minY, ele.maxX, ele.maxY);\n            canvasContext.stroke();\n          });\n          const boxes = this.props.currentInstrument.boxes;\n\n          if (boxes[0].minX <= leftWrist.x && boxes[0].maxX >= leftWrist.x && boxes[0].minY <= leftWrist.y && boxes[0].maxY >= leftWrist.y) {\n            if (!boxes[0].toggle) {\n              this.props.currentInstrument.boxes.slice(1).forEach(ele => {\n                if (ele.minX <= rightWrist.x && ele.maxX >= rightWrist.x && ele.minY <= rightWrist.y && ele.maxY >= rightWrist.y) {\n                  //console.log(`Triggered ${ele}`);\n                  ele.effect();\n                }\n              });\n              boxes[0].toggle = true;\n            }\n          } else {\n            if (boxes[0].toggle) {\n              this.props.currentInstrument.boxes.slice(1).forEach(ele => {\n                if (ele.minX <= rightWrist.x && ele.maxX >= rightWrist.x && ele.minY <= rightWrist.y && ele.maxY >= rightWrist.y) {\n                  //console.log(`Triggered ${ele}`);\n                  ele.effect();\n                }\n              });\n              boxes[0].toggle = true;\n            }\n\n            boxes[0].toggle = false;\n          }\n        } else {\n          this.props.currentInstrument.boxes.forEach(ele => {\n            //canvasContext.beginPath()\n            canvasContext.rect(ele.minX, ele.minY, ele.maxX, ele.maxY);\n            canvasContext.stroke();\n\n            if (ele.minX <= leftWrist.x && ele.maxX >= leftWrist.x && ele.minY <= leftWrist.y && ele.maxY >= leftWrist.y || ele.minX <= rightWrist.x && ele.maxX >= rightWrist.x && ele.minY <= rightWrist.y && ele.maxY >= rightWrist.y) {\n              //console.log(`Triggered ${ele}`);\n              if (!ele.played) {\n                if (!this.props.isHero) {\n                  ele.effect();\n                  ele.played = true;\n                }\n\n                PoseNet.currentNotes.forEach(note => {\n                  if (note.inBox && !note.isScored && (note.x <= ele.maxX && note.x + note.width >= ele.minX && note.y <= ele.maxY && note.y + note.height >= ele.minY || note.x <= ele.maxX && note.x + note.width >= ele.minX && note.y <= ele.maxY && note.y >= ele.minY)) {\n                    ele.effect();\n                    ele.played = true;\n                    PoseNet.score += 1;\n                    this.setState({\n                      score: PoseNet.score\n                    });\n                    note.isScored = true;\n                  }\n                });\n              }\n            } else if (ele.played) {\n              ele.played = false;\n            }\n          });\n        }\n      }\n\n      requestAnimationFrame(findPoseDetectionFrame);\n    };\n\n    findPoseDetectionFrame();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }\n    }, this.state.loading ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 15\n      }\n    }, \"LOADING\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 15\n      }\n    }, this.props.isHero ? /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 37\n      }\n    }, \"score: \", this.state.score) : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(\"video\", {\n      id: \"videoNoShow\",\n      playsInline: true,\n      ref: this.getVideo,\n      style: {\n        display: 'none',\n        width: \"100%\",\n        visibility: this.state.loading ? 'hidden' : 'visible'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"webcam\",\n      ref: this.getCanvas,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nPoseNet.defaultProps = {\n  videoWidth: 900,\n  videoHeight: 600,\n  flipHorizontal: true,\n  algorithm: 'single-pose',\n  showVideo: true,\n  showSkeleton: true,\n  showPoints: true,\n  minPoseConfidence: 0.1,\n  minPartConfidence: 0.5,\n  maxPoseDetections: 2,\n  nmsRadius: 20,\n  outputStride: 32,\n  imageScaleFactor: 0.45,\n  skeletonColor: '#ffadea',\n  skeletonLineWidth: 6,\n  loadingText: 'Loading...please be patient...'\n};\nPoseNet.songs = [[[5, 1], [-1, 1], [0, 1], [2, 1], [-1, 1], [0, 1], [-1, 1], [5, 1], [3, 1], [3, 1], [3, 1]], [[5, 1], [5, 1], [5, 1], [2, 1], [-1, 1], [1, 1], [-1, 1], [0, 1], [-1, 1], [5, 1], [5, 1], [2, 1], [1, 1], [-1, 1], [0, 1]], [[5, 1], [5, 1], [3, 1], [1, 1], [-1, 1], [1, 1], [-1, 1], [4, 1], [-1, 1], [4, 1], [-1, 1], [4, 1], [6, 1], [6, 1], [0, 1], [1, 1]], [[0, 1], [1, 1], [3, 1], [1, 1], [5, 1], [-1, 1], [6, 1], [-1, 1], [4, 1], [-1, 1], [0, 1], [1, 1], [3, 1], [1, 1], [4, 1], [-1, 1], [0, 1], [-1, 1], [2, -1]], [[6, 1], [6, 1], [3, 1], [3, 1], [4, 1], [4, 1], [3, 1], [-1, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [0, 1], [6, 1], [-1, 1], [3, 1], [3, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [-1, 1], [3, 1], [3, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [-1, 1], [6, 1], [6, 1], [3, 1], [3, 1], [4, 1], [4, 1], [3, 1], [-1, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [0, 1], [6, 1], [-1, 1]]];\nPoseNet.timeCount = 0;\nPoseNet.timeDelay = 0;\nPoseNet.backlogNotes = [];\nPoseNet.currentNotes = [];\nPoseNet.score = 0;\nPoseNet.songDone = -2;\nexport default PoseNet;","map":{"version":3,"sources":["/Users/gaurav_1411/Desktop/XylophoneHero/frontend/src/components/Camera.js"],"names":["drawKeyPoints","drawSkeleton","React","Component","posenet","PoseNet","constructor","props","getCanvas","elem","canvas","getVideo","video","state","loading","score","modalName","componentDidUpdate","prevProps","setState","load","architecture","outputStride","quantBytes","console","log","error","Error","setTimeout","componentDidMount","setupCamera","detectPose","navigator","mediaDevices","getUserMedia","videoWidth","videoHeight","width","height","stream","audio","facingMode","srcObject","Promise","resolve","onloadedmetadata","play","canvasContext","getContext","poseDetectionFrame","minPoseConfidence","minPartConfidence","showVideo","showPoints","showSkeleton","skeletonColor","skeletonLineWidth","posenetModel","findPoseDetectionFrame","poses","pose","estimateSinglePose","flipHorizontal","push","clearRect","save","scale","translate","drawImage","restore","forEach","keypoints","isHero","currentInstrument","name","songDone","songId","backlogNotes","length","currentNotes","songs","id","x","boxes","minX","y","maxX","inBox","isScored","timeDelay","slice","timeCount","note","minY","maxY","rect","stroke","leftWrist","position","rightWrist","ele","toggle","effect","played","requestAnimationFrame","render","margin","display","visibility","defaultProps","algorithm","maxPoseDetections","nmsRadius","imageScaleFactor","loadingText"],"mappings":";AAAA,SAAQA,aAAR,EAAuBC,YAAvB,QAA0C,SAA1C;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,OAAZ,MAAyB,4BAAzB;;AAGA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAqC9BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,SATmB,GASPC,IAAI,IAAI;AAClB,WAAKC,MAAL,GAAcD,IAAd;AACD,KAXkB;;AAAA,SAanBE,QAbmB,GAaRF,IAAI,IAAI;AACjB,WAAKG,KAAL,GAAaH,IAAb;AACD,KAfkB;;AAEjB,SAAKI,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,KAAK,EAAE,CAFI;AAGXC,MAAAA,SAAS,EAAE,KAAKT,KAAL,CAAWS;AAHX,KAAb;AAKD;;AAUD,QAAMC,kBAAN,CAAyBC,SAAzB,EAAoC;AAClC,QAAI,KAAKX,KAAL,CAAWS,SAAX,IAAwBE,SAAS,CAACF,SAAtC,EAAiD;AAC/C,WAAKG,QAAL,CAAc;AAACH,QAAAA,SAAS,EAAE,KAAKT,KAAL,CAAWS,SAAvB;AAAkCF,QAAAA,OAAO,EAAE;AAA3C,OAAd;;AACA,UAAI;AACF,aAAKV,OAAL,GAAe,MAAMA,OAAO,CAACgB,IAAR,CAAa;AAChCC,UAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWG,SADO;AAEhCM,UAAAA,YAAY,EAAE,EAFkB;AAGhCC,UAAAA,UAAU,EAAE;AAHoB,SAAb,CAArB;AAMAC,QAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmB,KAAKZ,KAAL,CAAWG,SAAU,EAArD;AACD,OARD,CAQE,OAAOU,KAAP,EAAc;AACdF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,OAXD,SAWU;AACRC,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKT,QAAL,CAAc;AAACL,YAAAA,OAAO,EAAE;AAAV,WAAd;AACD,SAFS,EAEP,GAFO,CAAV;AAGD;AACF;AACF;;AAED,QAAMe,iBAAN,GAA0B;AACxB,QAAI;AACF,YAAM,KAAKC,WAAL,EAAN;AACD,KAFD,CAEE,OAAOJ,KAAP,EAAc;AACd,YAAM,IAAIC,KAAJ,CACJ,oFADI,CAAN;AAGD;;AAED,QAAI;AACF,WAAKvB,OAAL,GAAe,MAAMA,OAAO,CAACgB,IAAR,CAAa;AAChCC,QAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWG,SADO;AAEhCM,QAAAA,YAAY,EAAE,EAFkB;AAGhCC,QAAAA,UAAU,EAAE;AAHoB,OAAb,CAArB;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmB,KAAKZ,KAAL,CAAWG,SAAU,EAArD;AACD,KARD,CAQE,OAAOU,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,KAXD,SAWU;AACRC,MAAAA,UAAU,CAAC,MAAM;AACf,aAAKT,QAAL,CAAc;AAACL,UAAAA,OAAO,EAAE;AAAV,SAAd;AACD,OAFS,EAEP,GAFO,CAAV;AAGD;;AAED,SAAKiB,UAAL;AACD;;AAED,QAAMD,WAAN,GAAoB;AAClB,QAAI,CAACE,SAAS,CAACC,YAAX,IAA2B,CAACD,SAAS,CAACC,YAAV,CAAuBC,YAAvD,EAAqE;AACnE,YAAM,IAAIP,KAAJ,CACJ,+DADI,CAAN;AAGD;;AACD,UAAM;AAACQ,MAAAA,UAAD;AAAaC,MAAAA;AAAb,QAA4B,KAAK7B,KAAvC;AACA,UAAMK,KAAK,GAAG,KAAKA,KAAnB;AACAA,IAAAA,KAAK,CAACyB,KAAN,GAAcF,UAAd;AACAvB,IAAAA,KAAK,CAAC0B,MAAN,GAAeF,WAAf;AAEA,UAAMG,MAAM,GAAG,MAAMP,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACvDM,MAAAA,KAAK,EAAE,KADgD;AAEvD5B,MAAAA,KAAK,EAAE;AACL6B,QAAAA,UAAU,EAAE,MADP;AAELJ,QAAAA,KAAK,EAAEF,UAFF;AAGLG,QAAAA,MAAM,EAAEF;AAHH;AAFgD,KAApC,CAArB;AASAxB,IAAAA,KAAK,CAAC8B,SAAN,GAAkBH,MAAlB;AAEA,WAAO,IAAII,OAAJ,CAAYC,OAAO,IAAI;AAC5BhC,MAAAA,KAAK,CAACiC,gBAAN,GAAyB,MAAM;AAC7BjC,QAAAA,KAAK,CAACkC,IAAN;AACAF,QAAAA,OAAO,CAAChC,KAAD,CAAP;AACD,OAHD;AAID,KALM,CAAP;AAMD;;AAEDmB,EAAAA,UAAU,GAAG;AACX,UAAM;AAACI,MAAAA,UAAD;AAAaC,MAAAA;AAAb,QAA4B,KAAK7B,KAAvC;AACA,UAAMG,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMqC,aAAa,GAAGrC,MAAM,CAACsC,UAAP,CAAkB,IAAlB,CAAtB;AAEAtC,IAAAA,MAAM,CAAC2B,KAAP,GAAeF,UAAf;AACAzB,IAAAA,MAAM,CAAC4B,MAAP,GAAgBF,WAAhB;AAEA,SAAKa,kBAAL,CAAwBF,aAAxB;AACD;;AAEDE,EAAAA,kBAAkB,CAACF,aAAD,EAAgB;AAChC,QAAI;AACFG,MAAAA,iBADE;AAEFC,MAAAA,iBAFE;AAGFhB,MAAAA,UAHE;AAIFC,MAAAA,WAJE;AAKFgB,MAAAA,SALE;AAMFC,MAAAA,UANE;AAOFC,MAAAA,YAPE;AAQFC,MAAAA,aARE;AASFC,MAAAA;AATE,QAUE,KAAKjD,KAVX,CADgC,CAYhC;AACA;;AACA,UAAMkD,YAAY,GAAG,KAAKrD,OAA1B;AACA,UAAMQ,KAAK,GAAG,KAAKA,KAAnB;;AAEA,UAAM8C,sBAAsB,GAAG,YAAY;AAAA;;AACzC;;;;;;;;;;;;;;;AAgBA,UAAIC,KAAK,GAAG,EAAZ;AACA,YAAMC,IAAI,GAAG,MAAMH,YAAY,CAACI,kBAAb,CAAgC,KAAKjD,KAArC,EAA4C;AAC7DA,QAAAA,KAAK,EAAE,IADsD;AAE7DkD,QAAAA,cAAc,EAAE;AAF6C,OAA5C,CAAnB;AAIAH,MAAAA,KAAK,CAACI,IAAN,CAAWH,IAAX;AAGAb,MAAAA,aAAa,CAACiB,SAAd,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B7B,UAA9B,EAA0CC,WAA1C;;AAEA,UAAIgB,SAAJ,EAAe;AACbL,QAAAA,aAAa,CAACkB,IAAd;AACAlB,QAAAA,aAAa,CAACmB,KAAd,CAAoB,CAAC,CAArB,EAAwB,CAAxB;AACAnB,QAAAA,aAAa,CAACoB,SAAd,CAAwB,CAAChC,UAAzB,EAAqC,CAArC;AACAY,QAAAA,aAAa,CAACqB,SAAd,CAAwBxD,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC,EAAqCuB,UAArC,EAAiDC,WAAjD;AACAW,QAAAA,aAAa,CAACsB,OAAd;AACD;;AAEDV,MAAAA,KAAK,CAACW,OAAN,CAAc,CAAC;AAACvD,QAAAA,KAAD;AAAQwD,QAAAA;AAAR,OAAD,KAAwB;AACpC;AACA,YAAIxD,KAAK,IAAImC,iBAAb,EAAgC;AAC9B,cAAIG,UAAJ,EAAgB;AACdrD,YAAAA,aAAa,CACXuE,SADW,EAEXpB,iBAFW,EAGXI,aAHW,EAIXR,aAJW,CAAb;AAMD;;AACD,cAAIO,YAAJ,EAAkB;AAChBrD,YAAAA,YAAY,CACVsE,SADU,EAEVpB,iBAFU,EAGVI,aAHU,EAIVC,iBAJU,EAKVT,aALU,CAAZ;AAOD;AACF;AACF,OArBD;;AAuBA,UAAG,KAAKxC,KAAL,CAAWiE,MAAX,IAAqB,+BAAKjE,KAAL,CAAWkE,iBAAX,gFAA8BC,IAA9B,MAAuC,WAA5D,IAA2ErE,OAAO,CAACsE,QAAR,IAAoB,KAAKpE,KAAL,CAAWqE,MAA7G,EAAqH;AAEnH;AACApD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWqE,MAAvB;;AACA,YAAIvE,OAAO,CAACwE,YAAR,CAAqBC,MAArB,IAA+B,CAA/B,IAAoCzE,OAAO,CAAC0E,YAAR,CAAqBD,MAArB,IAA+B,CAAnE,IAAwE,KAAKvE,KAAL,CAAWqE,MAAX,IAAqB,CAAC,CAAlG,EAAoG;AAClG,eAAKzD,QAAL,CAAc;AAAEJ,YAAAA,KAAK,EAAG;AAAV,WAAd;AACAV,UAAAA,OAAO,CAACwE,YAAR,GAAuBxE,OAAO,CAAC2E,KAAR,CAAc,KAAKzE,KAAL,CAAWqE,MAAzB,CAAvB;AAEAvE,UAAAA,OAAO,CAAC0E,YAAR,CAAqBhB,IAArB,CACE;AACEkB,YAAAA,EAAE,EAAE5E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CADN;AAEEK,YAAAA,CAAC,EAAE,KAAK3E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmC9E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CAAnC,EAA+DO,IAA/D,GAAoE,EAFzE;AAGEC,YAAAA,CAAC,EAAE,CAHL;AAGQ;AACNhD,YAAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmC9E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CAAnC,EAA+DS,IAA/D,GAAoE,KAAK/E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmC9E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CAAnC,EAA+DO,IAAnI,GAAwI,EAJjJ;AAKE9C,YAAAA,MAAM,EAAE,EALV;AAMEiD,YAAAA,KAAK,EAAE,KANT;AAOEC,YAAAA,QAAQ,EAAE;AAPZ,WADF;AAWAnF,UAAAA,OAAO,CAACoF,SAAR,GAAoBpF,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,IAA2B,EAA/C;AAEAxE,UAAAA,OAAO,CAACwE,YAAR,GAAuBxE,OAAO,CAACwE,YAAR,CAAqBa,KAArB,CAA2B,CAA3B,EAA8BrF,OAAO,CAACwE,YAAR,CAAqBC,MAAnD,CAAvB;AAED,SAvBkH,CAyBnH;AACA;AAEA;;;AACA,YAAIzE,OAAO,CAACsF,SAAR,IAAqBtF,OAAO,CAACoF,SAA7B,IAA0CpF,OAAO,CAACwE,YAAR,CAAqBC,MAArB,IAA+B,CAA7E,EAAgF;AAC9E,cAAGzE,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,KAA8B,CAAC,CAAlC,EAAqC;AACrCxE,YAAAA,OAAO,CAAC0E,YAAR,CAAqBhB,IAArB,CACE;AACEkB,cAAAA,EAAE,EAAE5E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CADN;AAEEK,cAAAA,CAAC,EAAE,KAAK3E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmC9E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CAAnC,EAA+DO,IAA/D,GAAoE,EAFzE;AAGEC,cAAAA,CAAC,EAAE,CAHL;AAGQ;AACNhD,cAAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmC9E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CAAnC,EAA+DS,IAA/D,GAAoE,KAAK/E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmC9E,OAAO,CAACwE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,CAAnC,EAA+DO,IAAnI,GAAwI,EAJjJ;AAKE9C,cAAAA,MAAM,EAAE;AALV,aADF;AAQD;;AAECjC,UAAAA,OAAO,CAACoF,SAAR;AAAoB;AAA+B,WAAnD;AAEApF,UAAAA,OAAO,CAACsF,SAAR,GAAoB,CAApB;AAEAtF,UAAAA,OAAO,CAACwE,YAAR,GAAuBxE,OAAO,CAACwE,YAAR,CAAqBa,KAArB,CAA2B,CAA3B,EAA8BrF,OAAO,CAACwE,YAAR,CAAqBC,MAAnD,CAAvB;AAED;;AAGDzE,QAAAA,OAAO,CAAC0E,YAAR,CAAqBT,OAArB,CAA8BsB,IAAD,IAAU;AAErC;AACApE,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYmE,IAAI,CAACV,CAAjB;AACA1D,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4CG,IAAxD;AACA5D,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYmE,IAAI,CAACV,CAAL,GAASU,IAAI,CAACvD,KAA1B;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4CK,IAAxD;;AACA,cAAG,CAACM,IAAI,CAACJ,QAAN,IAAkBI,IAAI,CAACP,CAAL,GAAS,KAAK9E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4CY,IAAvE,IAA+ED,IAAI,CAACP,CAAL,GAAS,KAAK9E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4Ca,IAApI,IAA4IF,IAAI,CAACV,CAAL,IAAU,KAAK3E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4CG,IAAlM,IAA0MQ,IAAI,CAACV,CAAL,GAASU,IAAI,CAACvD,KAAd,IAAuB,KAAK9B,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4CK,IAAhR,EAAsR;AACpRM,YAAAA,IAAI,CAACL,KAAL,GAAa,IAAb,CADoR,CAEpR;AACA;AACD,WAJD,MAIO;AACLK,YAAAA,IAAI,CAACL,KAAL,GAAa,KAAb;AACD;;AAED,cAAGK,IAAI,CAACP,CAAL,GAAS,KAAK9E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCS,IAAI,CAACX,EAAxC,EAA4Ca,IAAxD,EAA8D;AAC5DzF,YAAAA,OAAO,CAAC0E,YAAR,GAAuB1E,OAAO,CAAC0E,YAAR,CAAqBW,KAArB,CAA2B,CAA3B,EAA8BrF,OAAO,CAAC0E,YAAR,CAAqBD,MAAnD,CAAvB;AACD;;AAED/B,UAAAA,aAAa,CAACgD,IAAd,CAAmBH,IAAI,CAACV,CAAxB,EAA2BU,IAAI,CAACP,CAAhC,EAAmCO,IAAI,CAACvD,KAAxC,EAA+CuD,IAAI,CAACtD,MAApD;AACAS,UAAAA,aAAa,CAACiD,MAAd;AACAJ,UAAAA,IAAI,CAACP,CAAL,IAAU,EAAV;AAED,SA3BD;;AA6BA,YAAIhF,OAAO,CAACwE,YAAR,CAAqBC,MAArB,IAA+B,CAA/B,IAAoCzE,OAAO,CAAC0E,YAAR,CAAqBD,MAArB,IAA+B,CAAnE,IAAwE,KAAKvE,KAAL,CAAWqE,MAAX,IAAqB,CAAC,CAAlG,EAAoG;AAClGvE,UAAAA,OAAO,CAACsE,QAAR,GAAmB,KAAKpE,KAAL,CAAWqE,MAA9B;AACApD,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAapB,OAAO,CAACU,KAAjC;AACD;;AAEDV,QAAAA,OAAO,CAACsF,SAAR,IAAqB,CAArB;AAED;;AAED,UAAI,KAAKpF,KAAL,CAAWkE,iBAAX,IAAgC,IAApC,EAA0C;AACxC,cAAMwB,SAAS,GAAGtC,KAAK,CAAC,CAAD,CAAL,CAASY,SAAT,CAAmB,CAAnB,EAAsB2B,QAAxC;AACA,cAAMC,UAAU,GAAGxC,KAAK,CAAC,CAAD,CAAL,CAASY,SAAT,CAAmB,EAAnB,EAAuB2B,QAA1C;;AACA,YAAI,KAAK3F,KAAL,CAAWkE,iBAAX,CAA6BC,IAA7B,KAAsC,QAA1C,EAAoD;AAClD,eAAKnE,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCb,OAAnC,CAA2C8B,GAAG,IAAI;AAChDrD,YAAAA,aAAa,CAACgD,IAAd,CAAmBK,GAAG,CAAChB,IAAvB,EAA6BgB,GAAG,CAACP,IAAjC,EAAuCO,GAAG,CAACd,IAA3C,EAAiDc,GAAG,CAACN,IAArD;AACA/C,YAAAA,aAAa,CAACiD,MAAd;AACD,WAHD;AAIA,gBAAMb,KAAK,GAAG,KAAK5E,KAAL,CAAWkE,iBAAX,CAA6BU,KAA3C;;AACA,cAAIA,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,IAAiBa,SAAS,CAACf,CAA3B,IAAgCC,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,IAAiBW,SAAS,CAACf,CAA3D,IAAgEC,KAAK,CAAC,CAAD,CAAL,CAASU,IAAT,IAAiBI,SAAS,CAACZ,CAA3F,IAAgGF,KAAK,CAAC,CAAD,CAAL,CAASW,IAAT,IAAiBG,SAAS,CAACZ,CAA/H,EAAkI;AAChI,gBAAI,CAACF,KAAK,CAAC,CAAD,CAAL,CAASkB,MAAd,EAAsB;AACpB,mBAAK9F,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCO,KAAnC,CAAyC,CAAzC,EAA4CpB,OAA5C,CAAqD8B,GAAD,IAAS;AAC3D,oBAAIA,GAAG,CAAChB,IAAJ,IAAYe,UAAU,CAACjB,CAAvB,IAA4BkB,GAAG,CAACd,IAAJ,IAAYa,UAAU,CAACjB,CAAnD,IAAwDkB,GAAG,CAACP,IAAJ,IAAYM,UAAU,CAACd,CAA/E,IAAoFe,GAAG,CAACN,IAAJ,IAAYK,UAAU,CAACd,CAA/G,EAAkH;AAC9G;AACAe,kBAAAA,GAAG,CAACE,MAAJ;AACD;AACJ,eALD;AAMAnB,cAAAA,KAAK,CAAC,CAAD,CAAL,CAASkB,MAAT,GAAkB,IAAlB;AACD;AACF,WAVD,MAUO;AACL,gBAAIlB,KAAK,CAAC,CAAD,CAAL,CAASkB,MAAb,EAAqB;AACnB,mBAAK9F,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCO,KAAnC,CAAyC,CAAzC,EAA4CpB,OAA5C,CAAqD8B,GAAD,IAAS;AAC3D,oBAAIA,GAAG,CAAChB,IAAJ,IAAYe,UAAU,CAACjB,CAAvB,IAA4BkB,GAAG,CAACd,IAAJ,IAAYa,UAAU,CAACjB,CAAnD,IAAwDkB,GAAG,CAACP,IAAJ,IAAYM,UAAU,CAACd,CAA/E,IAAoFe,GAAG,CAACN,IAAJ,IAAYK,UAAU,CAACd,CAA/G,EAAkH;AAC9G;AACAe,kBAAAA,GAAG,CAACE,MAAJ;AACD;AACJ,eALD;AAMAnB,cAAAA,KAAK,CAAC,CAAD,CAAL,CAASkB,MAAT,GAAkB,IAAlB;AACD;;AACDlB,YAAAA,KAAK,CAAC,CAAD,CAAL,CAASkB,MAAT,GAAkB,KAAlB;AACD;AACF,SA5BD,MA4BO;AACL,eAAK9F,KAAL,CAAWkE,iBAAX,CAA6BU,KAA7B,CAAmCb,OAAnC,CAA4C8B,GAAD,IAAS;AAClD;AACArD,YAAAA,aAAa,CAACgD,IAAd,CAAmBK,GAAG,CAAChB,IAAvB,EAA6BgB,GAAG,CAACP,IAAjC,EAAuCO,GAAG,CAACd,IAA3C,EAAiDc,GAAG,CAACN,IAArD;AACA/C,YAAAA,aAAa,CAACiD,MAAd;;AAEA,gBAAKI,GAAG,CAAChB,IAAJ,IAAYa,SAAS,CAACf,CAAtB,IAA2BkB,GAAG,CAACd,IAAJ,IAAYW,SAAS,CAACf,CAAjD,IAAsDkB,GAAG,CAACP,IAAJ,IAAYI,SAAS,CAACZ,CAA5E,IAAiFe,GAAG,CAACN,IAAJ,IAAYG,SAAS,CAACZ,CAAxG,IACCe,GAAG,CAAChB,IAAJ,IAAYe,UAAU,CAACjB,CAAvB,IAA4BkB,GAAG,CAACd,IAAJ,IAAYa,UAAU,CAACjB,CAAnD,IAAwDkB,GAAG,CAACP,IAAJ,IAAYM,UAAU,CAACd,CAA/E,IAAoFe,GAAG,CAACN,IAAJ,IAAYK,UAAU,CAACd,CADhH,EACoH;AAC9G;AACA,kBAAI,CAACe,GAAG,CAACG,MAAT,EAAiB;AACf,oBAAG,CAAC,KAAKhG,KAAL,CAAWiE,MAAf,EAAuB;AACrB4B,kBAAAA,GAAG,CAACE,MAAJ;AACAF,kBAAAA,GAAG,CAACG,MAAJ,GAAa,IAAb;AACD;;AAEDlG,gBAAAA,OAAO,CAAC0E,YAAR,CAAqBT,OAArB,CAA8BsB,IAAD,IAAU;AACrC,sBAAIA,IAAI,CAACL,KAAL,IAAc,CAACK,IAAI,CAACJ,QAApB,KAAkCI,IAAI,CAACV,CAAL,IAAUkB,GAAG,CAACd,IAAd,IAAsBM,IAAI,CAACV,CAAL,GAAOU,IAAI,CAACvD,KAAZ,IAAqB+D,GAAG,CAAChB,IAA/C,IAAuDQ,IAAI,CAACP,CAAL,IAAUe,GAAG,CAACN,IAArE,IAA6EF,IAAI,CAACP,CAAL,GAAOO,IAAI,CAACtD,MAAZ,IAAsB8D,GAAG,CAACP,IAAxG,IAChCD,IAAI,CAACV,CAAL,IAAUkB,GAAG,CAACd,IAAd,IAAsBM,IAAI,CAACV,CAAL,GAAOU,IAAI,CAACvD,KAAZ,IAAqB+D,GAAG,CAAChB,IAA/C,IAAuDQ,IAAI,CAACP,CAAL,IAAUe,GAAG,CAACN,IAArE,IAA6EF,IAAI,CAACP,CAAL,IAAUe,GAAG,CAACP,IAD5F,CAAJ,EACwG;AACtGO,oBAAAA,GAAG,CAACE,MAAJ;AACAF,oBAAAA,GAAG,CAACG,MAAJ,GAAa,IAAb;AACAlG,oBAAAA,OAAO,CAACU,KAAR,IAAiB,CAAjB;AACA,yBAAKI,QAAL,CAAc;AAAEJ,sBAAAA,KAAK,EAAEV,OAAO,CAACU;AAAjB,qBAAd;AACA6E,oBAAAA,IAAI,CAACJ,QAAL,GAAgB,IAAhB;AACD;AACF,iBATD;AAWD;AACJ,aArBH,MAqBS,IAAIY,GAAG,CAACG,MAAR,EAAgB;AACrBH,cAAAA,GAAG,CAACG,MAAJ,GAAa,KAAb;AACD;AACJ,WA7BD;AA8BH;AACA;;AAEDC,MAAAA,qBAAqB,CAAC9C,sBAAD,CAArB;AAED,KArND;;AAsNAA,IAAAA,sBAAsB;AACvB;;AAED+C,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAK5F,KAAL,CAAWC,OAAX,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,gBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKP,KAAL,CAAWiE,MAAX,gBAAoB;AAAI,MAAA,KAAK,EAAE;AAAEkC,QAAAA,MAAM,EAAE;AAAV,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiC,KAAK7F,KAAL,CAAWE,KAA5C,CAApB,gBAA8E,yCADhF,CAHN,eAME;AAAO,MAAA,EAAE,EAAC,aAAV;AAAwB,MAAA,WAAW,MAAnC;AAAoC,MAAA,GAAG,EAAE,KAAKJ,QAA9C;AAAwD,MAAA,KAAK,EAAE;AAACgG,QAAAA,OAAO,EAAE,MAAV;AAAkBtE,QAAAA,KAAK,EAAE,MAAzB;AAAiCuE,QAAAA,UAAU,EAAE,KAAK/F,KAAL,CAAWC,OAAX,GAAqB,QAArB,GAAgC;AAA7E,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAOE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,GAAG,EAAE,KAAKN,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF,CADF;AAaD;;AA1Y6B;;AAA1BH,O,CAEGwG,Y,GAAe;AACpB1E,EAAAA,UAAU,EAAE,GADQ;AAEpBC,EAAAA,WAAW,EAAE,GAFO;AAGpB0B,EAAAA,cAAc,EAAE,IAHI;AAIpBgD,EAAAA,SAAS,EAAE,aAJS;AAKpB1D,EAAAA,SAAS,EAAE,IALS;AAMpBE,EAAAA,YAAY,EAAE,IANM;AAOpBD,EAAAA,UAAU,EAAE,IAPQ;AAQpBH,EAAAA,iBAAiB,EAAE,GARC;AASpBC,EAAAA,iBAAiB,EAAE,GATC;AAUpB4D,EAAAA,iBAAiB,EAAE,CAVC;AAWpBC,EAAAA,SAAS,EAAE,EAXS;AAYpB1F,EAAAA,YAAY,EAAE,EAZM;AAapB2F,EAAAA,gBAAgB,EAAE,IAbE;AAcpB1D,EAAAA,aAAa,EAAE,SAdK;AAepBC,EAAAA,iBAAiB,EAAE,CAfC;AAgBpB0D,EAAAA,WAAW,EAAE;AAhBO,C;AAFlB7G,O,CAqBG2E,K,GAAQ,CACb,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAC,CAAF,EAAK,CAAL,CAAT,EAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB,EAA0B,CAAC,CAAD,EAAI,CAAJ,CAA1B,EAAkC,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlC,EAA2C,CAAC,CAAD,EAAI,CAAJ,CAA3C,EAAmD,CAAC,CAAC,CAAF,EAAK,CAAL,CAAnD,EAA4D,CAAC,CAAD,EAAI,CAAJ,CAA5D,EAAoE,CAAC,CAAD,EAAI,CAAJ,CAApE,EAA4E,CAAC,CAAD,EAAI,CAAJ,CAA5E,EAAoF,CAAC,CAAD,EAAI,CAAJ,CAApF,CADa,EAEb,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAC,CAAF,EAAK,CAAL,CAAjC,EAA0C,CAAC,CAAD,EAAI,CAAJ,CAA1C,EAAkD,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlD,EAA2D,CAAC,CAAD,EAAI,CAAJ,CAA3D,EAAmE,CAAC,CAAC,CAAF,EAAK,CAAL,CAAnE,EAA4E,CAAC,CAAD,EAAI,CAAJ,CAA5E,EAAoF,CAAC,CAAD,EAAI,CAAJ,CAApF,EAA4F,CAAC,CAAD,EAAI,CAAJ,CAA5F,EAAoG,CAAC,CAAD,EAAI,CAAJ,CAApG,EAA4G,CAAC,CAAC,CAAF,EAAK,CAAL,CAA5G,EAAqH,CAAC,CAAD,EAAI,CAAJ,CAArH,CAFa,EAGb,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAC,CAAF,EAAK,CAAL,CAAjC,EAA0C,CAAC,CAAD,EAAI,CAAJ,CAA1C,EAAkD,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlD,EAA2D,CAAC,CAAD,EAAI,CAAJ,CAA3D,EAAmE,CAAC,CAAC,CAAF,EAAK,CAAL,CAAnE,EAA4E,CAAC,CAAD,EAAI,CAAJ,CAA5E,EAAoF,CAAC,CAAC,CAAF,EAAK,CAAL,CAApF,EAA6F,CAAC,CAAD,EAAI,CAAJ,CAA7F,EAAqG,CAAC,CAAD,EAAI,CAAJ,CAArG,EAA6G,CAAC,CAAD,EAAI,CAAJ,CAA7G,EAAqH,CAAC,CAAD,EAAI,CAAJ,CAArH,EAA6H,CAAC,CAAD,EAAI,CAAJ,CAA7H,CAHa,EAIb,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAD,EAAI,CAAJ,CAAjC,EAAyC,CAAC,CAAC,CAAF,EAAK,CAAL,CAAzC,EAAkD,CAAC,CAAD,EAAI,CAAJ,CAAlD,EAA0D,CAAC,CAAC,CAAF,EAAK,CAAL,CAA1D,EAAmE,CAAC,CAAD,EAAI,CAAJ,CAAnE,EAA2E,CAAC,CAAC,CAAF,EAAK,CAAL,CAA3E,EAAoF,CAAC,CAAD,EAAI,CAAJ,CAApF,EAA4F,CAAC,CAAD,EAAI,CAAJ,CAA5F,EAAoG,CAAC,CAAD,EAAI,CAAJ,CAApG,EAA4G,CAAC,CAAD,EAAI,CAAJ,CAA5G,EAAoH,CAAC,CAAD,EAAI,CAAJ,CAApH,EAA4H,CAAC,CAAC,CAAF,EAAK,CAAL,CAA5H,EAAqI,CAAC,CAAD,EAAI,CAAJ,CAArI,EAA6I,CAAC,CAAC,CAAF,EAAK,CAAL,CAA7I,EAAsJ,CAAC,CAAD,EAAI,CAAC,CAAL,CAAtJ,CAJa,EAKb,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiC,CAAC,CAAD,EAAI,CAAJ,CAAjC,EAAyC,CAAC,CAAD,EAAI,CAAJ,CAAzC,EAAiD,CAAC,CAAD,EAAI,CAAJ,CAAjD,EAAyD,CAAC,CAAC,CAAF,EAAK,CAAL,CAAzD,EAAkE,CAAC,CAAD,EAAI,CAAJ,CAAlE,EAA0E,CAAC,CAAD,EAAI,CAAJ,CAA1E,EAAkF,CAAC,CAAD,EAAI,CAAJ,CAAlF,EAA0F,CAAC,CAAD,EAAI,CAAJ,CAA1F,EAAkG,CAAC,CAAD,EAAI,CAAJ,CAAlG,EAA0G,CAAC,CAAD,EAAI,CAAJ,CAA1G,EAAkH,CAAC,CAAD,EAAI,CAAJ,CAAlH,EAA0H,CAAC,CAAC,CAAF,EAAK,CAAL,CAA1H,EAAmI,CAAC,CAAD,EAAI,CAAJ,CAAnI,EAA2I,CAAC,CAAD,EAAI,CAAJ,CAA3I,EAAmJ,CAAC,CAAD,EAAI,CAAJ,CAAnJ,EAA2J,CAAC,CAAD,EAAI,CAAJ,CAA3J,EAAmK,CAAC,CAAD,EAAI,CAAJ,CAAnK,EAA2K,CAAC,CAAD,EAAI,CAAJ,CAA3K,EAAmL,CAAC,CAAD,EAAI,CAAJ,CAAnL,EAA2L,CAAC,CAAC,CAAF,EAAK,CAAL,CAA3L,EAAoM,CAAC,CAAD,EAAI,CAAJ,CAApM,EAA4M,CAAC,CAAD,EAAI,CAAJ,CAA5M,EAAoN,CAAC,CAAD,EAAI,CAAJ,CAApN,EAA4N,CAAC,CAAD,EAAI,CAAJ,CAA5N,EAAoO,CAAC,CAAD,EAAI,CAAJ,CAApO,EAA4O,CAAC,CAAD,EAAI,CAAJ,CAA5O,EAAoP,CAAC,CAAD,EAAI,CAAJ,CAApP,EAA4P,CAAC,CAAC,CAAF,EAAK,CAAL,CAA5P,EAAqQ,CAAC,CAAD,EAAI,CAAJ,CAArQ,EAA6Q,CAAC,CAAD,EAAI,CAAJ,CAA7Q,EAAqR,CAAC,CAAD,EAAI,CAAJ,CAArR,EAA6R,CAAC,CAAD,EAAI,CAAJ,CAA7R,EAAqS,CAAC,CAAD,EAAI,CAAJ,CAArS,EAA6S,CAAC,CAAD,EAAI,CAAJ,CAA7S,EAAqT,CAAC,CAAD,EAAI,CAAJ,CAArT,EAA6T,CAAC,CAAC,CAAF,EAAK,CAAL,CAA7T,EAAsU,CAAC,CAAD,EAAI,CAAJ,CAAtU,EAA8U,CAAC,CAAD,EAAI,CAAJ,CAA9U,EAAsV,CAAC,CAAD,EAAI,CAAJ,CAAtV,EAA8V,CAAC,CAAD,EAAI,CAAJ,CAA9V,EAAsW,CAAC,CAAD,EAAI,CAAJ,CAAtW,EAA8W,CAAC,CAAD,EAAI,CAAJ,CAA9W,EAAsX,CAAC,CAAD,EAAI,CAAJ,CAAtX,EAA8X,CAAC,CAAC,CAAF,EAAK,CAAL,CAA9X,CALa,C;AArBX3E,O,CA8BGsF,S,GAAY,C;AA9BftF,O,CA+BGoF,S,GAAY,C;AA/BfpF,O,CAgCGwE,Y,GAAe,E;AAhClBxE,O,CAiCG0E,Y,GAAe,E;AAjClB1E,O,CAkCGU,K,GAAQ,C;AAlCXV,O,CAmCGsE,Q,GAAW,CAAC,C;AA0WrB,eAAetE,OAAf","sourcesContent":["import {drawKeyPoints, drawSkeleton} from './utils'\nimport React, {Component} from 'react'\nimport * as posenet from '@tensorflow-models/posenet'\n\n\nclass PoseNet extends Component {\n\n  static defaultProps = {\n    videoWidth: 900,\n    videoHeight: 600,\n    flipHorizontal: true,\n    algorithm: 'single-pose',\n    showVideo: true,\n    showSkeleton: true,\n    showPoints: true,\n    minPoseConfidence: 0.1,\n    minPartConfidence: 0.5,\n    maxPoseDetections: 2,\n    nmsRadius: 20,\n    outputStride: 32,\n    imageScaleFactor: 0.45,\n    skeletonColor: '#ffadea',\n    skeletonLineWidth: 6,\n    loadingText: 'Loading...please be patient...',\n  };\n\n  static songs = [\n    [[5, 1], [-1, 1], [0, 1], [2, 1], [-1, 1], [0, 1], [-1, 1], [5, 1], [3, 1], [3, 1], [3, 1]],\n    [[5, 1], [5, 1], [5, 1], [2, 1], [-1, 1], [1, 1], [-1, 1], [0, 1], [-1, 1], [5, 1], [5, 1], [2, 1], [1, 1], [-1, 1], [0, 1]],\n    [[5, 1], [5, 1], [3, 1], [1, 1], [-1, 1], [1, 1], [-1, 1], [4, 1], [-1, 1], [4, 1], [-1, 1], [4, 1], [6, 1], [6, 1], [0, 1], [1, 1]],\n    [[0, 1], [1, 1], [3, 1], [1, 1], [5, 1], [-1, 1], [6, 1], [-1, 1], [4, 1], [-1, 1], [0, 1], [1, 1], [3, 1], [1, 1], [4, 1], [-1, 1], [0, 1], [-1, 1], [2, -1]],\n    [[6, 1], [6, 1], [3, 1], [3, 1], [4, 1], [4, 1], [3, 1], [-1, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [0, 1], [6, 1], [-1, 1], [3, 1], [3, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [-1, 1], [3, 1], [3, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [-1, 1], [6, 1], [6, 1], [3, 1], [3, 1], [4, 1], [4, 1], [3, 1], [-1, 1], [2, 1], [2, 1], [1, 1], [1, 1], [0, 1], [0, 1], [6, 1], [-1, 1]]\n\n\n  ];\n  static timeCount = 0;\n  static timeDelay = 0;\n  static backlogNotes = [];\n  static currentNotes = [];\n  static score = 0;\n  static songDone = -2;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      score: 0,\n      modalName: this.props.modalName\n    };\n  }\n\n  getCanvas = elem => {\n    this.canvas = elem\n  }\n\n  getVideo = elem => {\n    this.video = elem\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.modalName != prevProps.modalName) {\n      this.setState({modalName: this.props.modalName, loading: true})\n      try {\n        this.posenet = await posenet.load({\n          architecture: this.state.modalName,\n          outputStride: 16,\n          quantBytes: 2\n\n        });\n        console.log(`Current modal is ${this.state.modalName}`);\n      } catch (error) {\n        console.log(error)\n        throw new Error('PoseNet failed to load');\n      } finally {\n        setTimeout(() => {\n          this.setState({loading: false});\n        }, 200);\n      }\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      await this.setupCamera();\n    } catch (error) {\n      throw new Error(\n        'This browser does not support video capture, or this device does not have a camera'\n      )\n    }\n\n    try {\n      this.posenet = await posenet.load({\n        architecture: this.state.modalName,\n        outputStride: 32,\n        quantBytes: 2\n\n      });\n      console.log(`Current modal is ${this.state.modalName}`);\n    } catch (error) {\n      console.log(error)\n      throw new Error('PoseNet failed to load');\n    } finally {\n      setTimeout(() => {\n        this.setState({loading: false});\n      }, 200);\n    }\n\n    this.detectPose();\n  }\n\n  async setupCamera() {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      throw new Error(\n        'Browser API navigator.mediaDevices.getUserMedia not available'\n      );\n    }\n    const {videoWidth, videoHeight} = this.props;\n    const video = this.video;\n    video.width = videoWidth;\n    video.height = videoHeight;\n\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        facingMode: 'user',\n        width: videoWidth,\n        height: videoHeight\n      }\n    })\n\n    video.srcObject = stream;\n\n    return new Promise(resolve => {\n      video.onloadedmetadata = () => {\n        video.play()\n        resolve(video)\n      }\n    })\n  }\n\n  detectPose() {\n    const {videoWidth, videoHeight} = this.props;\n    const canvas = this.canvas;\n    const canvasContext = canvas.getContext('2d')\n\n    canvas.width = videoWidth;\n    canvas.height = videoHeight;\n\n    this.poseDetectionFrame(canvasContext)\n  }\n\n  poseDetectionFrame(canvasContext) {\n    let {\n      minPoseConfidence,\n      minPartConfidence,\n      videoWidth,\n      videoHeight,\n      showVideo,\n      showPoints,\n      showSkeleton,\n      skeletonColor,\n      skeletonLineWidth\n      } = this.props;\n    //console.log(minPoseConfidence);\n    //console.log(this.props.minPoseConfidence);\n    const posenetModel = this.posenet;\n    const video = this.video;\n\n    const findPoseDetectionFrame = async () => {\n      /*let {\n      minPoseConfidence,\n      minPartConfidence,\n      videoWidth,\n      videoHeight,\n      showVideo,\n      showPoints,\n      showSkeleton,\n      skeletonColor,\n      skeletonLineWidth\n      } = this.props;\n    //console.log(minPoseConfidence);\n    //console.log(this.props.minPoseConfidence);\n    const posenetModel = this.posenet;\n    const video = this.video;*/\n\n      let poses = [];\n      const pose = await posenetModel.estimateSinglePose(this.video, {\n        video: true,\n        flipHorizontal: true\n      });\n      poses.push(pose);\n\n\n      canvasContext.clearRect(0, 0, videoWidth, videoHeight);\n\n      if (showVideo) {\n        canvasContext.save();\n        canvasContext.scale(-1, 1);\n        canvasContext.translate(-videoWidth, 0);\n        canvasContext.drawImage(video, 0, 0, videoWidth, videoHeight);\n        canvasContext.restore();\n      }\n\n      poses.forEach(({score, keypoints}) => {\n        //console.log(this.props.minPoseConfidence);\n        if (score >= minPoseConfidence) {\n          if (showPoints) {\n            drawKeyPoints(\n              keypoints,\n              minPartConfidence,\n              skeletonColor,\n              canvasContext\n            );\n          }\n          if (showSkeleton) {\n            drawSkeleton(\n              keypoints,\n              minPartConfidence,\n              skeletonColor,\n              skeletonLineWidth,\n              canvasContext\n            );\n          }\n        }\n      });\n\n      if(this.props.isHero && this.props.currentInstrument?.name === \"xylophone\" && PoseNet.songDone != this.props.songId) {\n\n        // if this is the beginning of the song, add first note\n        console.log(this.props.songId);\n        if (PoseNet.backlogNotes.length == 0 && PoseNet.currentNotes.length == 0 && this.props.songId != -1){\n          this.setState({ score : 0 });\n          PoseNet.backlogNotes = PoseNet.songs[this.props.songId]\n\n          PoseNet.currentNotes.push(\n            {\n              id: PoseNet.backlogNotes[0][0],\n              x: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX+10,\n              y: 0, //this.props.currentInstrument.boxes[PoseNet.songs[this.props.songId][0][0]].minY\n              width: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].maxX-this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX-20,\n              height: 50,\n              inBox: false,\n              isScored: false\n            })\n\n          PoseNet.timeDelay = PoseNet.backlogNotes[0][1]*30;\n\n          PoseNet.backlogNotes = PoseNet.backlogNotes.slice(1, PoseNet.backlogNotes.length);\n\n        }\n\n        //console.log(PoseNet.backlogNotes[0]);\n        //console.log(PoseNet.currentNotes);\n\n        // check if a new note should be added\n        if (PoseNet.timeCount == PoseNet.timeDelay && PoseNet.backlogNotes.length != 0) {\n          if(PoseNet.backlogNotes[0][0] != -1) {\n          PoseNet.currentNotes.push(\n            {\n              id: PoseNet.backlogNotes[0][0],\n              x: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX+10,\n              y: 0, //this.props.currentInstrument.boxes[PoseNet.songs[this.props.songId][0][0]].minY\n              width: this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].maxX-this.props.currentInstrument.boxes[PoseNet.backlogNotes[0][0]].minX-20,\n              height: 50\n            })\n        }\n\n          PoseNet.timeDelay = /*PoseNet.backlogNotes[0][1]*/ 7;\n\n          PoseNet.timeCount = 0;\n\n          PoseNet.backlogNotes = PoseNet.backlogNotes.slice(1, PoseNet.backlogNotes.length);\n\n        }\n\n\n        PoseNet.currentNotes.forEach((note) => {\n\n          // if the note is in the box, check if the box is pressed\n          console.log(\"note.x = \")\n          console.log(note.x)\n          console.log(\"box.minX = \")\n          console.log(this.props.currentInstrument.boxes[note.id].minX)\n          console.log(\"note.x + note.width = \")\n          console.log(note.x + note.width)\n          console.log(\"box.maxX = \")\n          console.log(this.props.currentInstrument.boxes[note.id].maxX)\n          if(!note.isScored && note.y > this.props.currentInstrument.boxes[note.id].minY && note.y < this.props.currentInstrument.boxes[note.id].maxY && note.x >= this.props.currentInstrument.boxes[note.id].minX && note.x + note.width <= this.props.currentInstrument.boxes[note.id].maxX) {\n            note.inBox = true;\n            //PoseNet.score += 1;\n            //note.isScored = true;\n          } else {\n            note.inBox = false;\n          }\n\n          if(note.y > this.props.currentInstrument.boxes[note.id].maxY) {\n            PoseNet.currentNotes = PoseNet.currentNotes.slice(1, PoseNet.currentNotes.length);\n          }\n\n          canvasContext.rect(note.x, note.y, note.width, note.height);\n          canvasContext.stroke();\n          note.y += 35;\n\n        })\n\n        if (PoseNet.backlogNotes.length == 0 && PoseNet.currentNotes.length == 0 && this.props.songId != -1){\n          PoseNet.songDone = this.props.songId;\n          console.log(\"Score : \" + PoseNet.score);\n        }\n\n        PoseNet.timeCount += 1;\n\n      }\n\n      if (this.props.currentInstrument != null) {\n        const leftWrist = poses[0].keypoints[9].position;\n        const rightWrist = poses[0].keypoints[10].position;\n        if (this.props.currentInstrument.name === \"guitar\") {\n          this.props.currentInstrument.boxes.forEach(ele => {\n            canvasContext.rect(ele.minX, ele.minY, ele.maxX, ele.maxY);\n            canvasContext.stroke();\n          })\n          const boxes = this.props.currentInstrument.boxes;\n          if (boxes[0].minX <= leftWrist.x && boxes[0].maxX >= leftWrist.x && boxes[0].minY <= leftWrist.y && boxes[0].maxY >= leftWrist.y) {\n            if (!boxes[0].toggle) {\n              this.props.currentInstrument.boxes.slice(1).forEach((ele) => {\n                if (ele.minX <= rightWrist.x && ele.maxX >= rightWrist.x && ele.minY <= rightWrist.y && ele.maxY >= rightWrist.y) {\n                    //console.log(`Triggered ${ele}`);\n                    ele.effect();\n                  }\n              });\n              boxes[0].toggle = true;\n            }\n          } else {\n            if (boxes[0].toggle) {\n              this.props.currentInstrument.boxes.slice(1).forEach((ele) => {\n                if (ele.minX <= rightWrist.x && ele.maxX >= rightWrist.x && ele.minY <= rightWrist.y && ele.maxY >= rightWrist.y) {\n                    //console.log(`Triggered ${ele}`);\n                    ele.effect();\n                  }\n              });\n              boxes[0].toggle = true;\n            }\n            boxes[0].toggle = false;\n          }\n        } else {\n          this.props.currentInstrument.boxes.forEach((ele) => {\n            //canvasContext.beginPath()\n            canvasContext.rect(ele.minX, ele.minY, ele.maxX, ele.maxY);\n            canvasContext.stroke();\n\n            if ((ele.minX <= leftWrist.x && ele.maxX >= leftWrist.x && ele.minY <= leftWrist.y && ele.maxY >= leftWrist.y) ||\n                (ele.minX <= rightWrist.x && ele.maxX >= rightWrist.x && ele.minY <= rightWrist.y && ele.maxY >= rightWrist.y)) {\n                  //console.log(`Triggered ${ele}`);\n                  if (!ele.played) {\n                    if(!this.props.isHero) {\n                      ele.effect();\n                      ele.played = true;\n                    }\n\n                    PoseNet.currentNotes.forEach((note) => {\n                      if (note.inBox && !note.isScored && ((note.x <= ele.maxX && note.x+note.width >= ele.minX && note.y <= ele.maxY && note.y+note.height >= ele.minY) ||\n                          (note.x <= ele.maxX && note.x+note.width >= ele.minX && note.y <= ele.maxY && note.y >= ele.minY))) {\n                        ele.effect();\n                        ele.played = true;\n                        PoseNet.score += 1;\n                        this.setState({ score: PoseNet.score })\n                        note.isScored = true;\n                      }\n                    })\n\n                  }\n              } else if (ele.played) {\n                ele.played = false;\n              }\n          });\n      }\n      }\n\n      requestAnimationFrame(findPoseDetectionFrame);\n\n    };\n    findPoseDetectionFrame()\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          { this.state.loading ?\n              <h1>LOADING</h1> :\n              <div>\n              { this.props.isHero ? <h1 style={{ margin: 0}}>score: {this.state.score}</h1> : <></>}\n              </div>}\n          <video id=\"videoNoShow\" playsInline ref={this.getVideo} style={{display: 'none', width: \"100%\", visibility: this.state.loading ? 'hidden' : 'visible'}} />\n          <canvas className=\"webcam\" ref={this.getCanvas} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PoseNet\n"]},"metadata":{},"sourceType":"module"}